{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Hyper-spectral Imaging Group at the University of Waikato.","title":"Home"},{"location":"people/","text":"Hyper-spectral imaging group: AProf Melanie Ooi Dale Fletcher Peter Reutemann","title":"People"},{"location":"publications/","text":"2023 # Abeysekera SK, Robinson A, Ooi MPL, Kuang YC, Manley-Harris M, Holmes W, Hirst E, Nowak J, Caddie M, Steinhorn G, Demidenko S. Sparse reproducible machine learning for near infrared hyperspectral imaging: Estimating the tetrahydrocannabinolic acid concentration in Cannabis sativa L. 1 Feb 2023. Industrial Crops and Products, 10.1016/j.indcrop.2022.116137","title":"Publications"},{"location":"publications/#2023","text":"Abeysekera SK, Robinson A, Ooi MPL, Kuang YC, Manley-Harris M, Holmes W, Hirst E, Nowak J, Caddie M, Steinhorn G, Demidenko S. Sparse reproducible machine learning for near infrared hyperspectral imaging: Estimating the tetrahydrocannabinolic acid concentration in Cannabis sativa L. 1 Feb 2023. Industrial Crops and Products, 10.1016/j.indcrop.2022.116137","title":"2023"},{"location":"happy/","text":"Python libraries and Docker images for hyper-spectral data processing and modelling. ADAMS Docker images happy-tools Segment Anything","title":"Introduction"},{"location":"happy/adams/","text":"ADAMS-based workflow module.","title":"ADAMS"},{"location":"happy/docker_images/","text":"The following Docker images are available: happy-gdal-docker - GDAL docker image happy-spy-docker - Spectral Python library image","title":"Docker images"},{"location":"happy/happy_tools/","text":"happy-tools contains several command-line utilities and a graphical viewer for HSI ENVI files. Prerequisites # Python Virtual environments sudo apt install virtualenv python3-tk Installation # In the home directory, create a Python virtual environment in directory happy with access to the system-wide installed libraries: virtualenv --system-site-packages -p /usr/bin/python3 happy ./happy/bin/pip install git+https://github.com/wairas/happy-tools.git Tools # The following tools are available (located in ./happy/bin ): happy-hsi2csv - converts HSI images into CSV happy-hsi2rbg - generates fake RGB PNG files from HSI images happy-viewer - for viewing HSI images","title":"happy-tools"},{"location":"happy/happy_tools/#prerequisites","text":"Python Virtual environments sudo apt install virtualenv python3-tk","title":"Prerequisites"},{"location":"happy/happy_tools/#installation","text":"In the home directory, create a Python virtual environment in directory happy with access to the system-wide installed libraries: virtualenv --system-site-packages -p /usr/bin/python3 happy ./happy/bin/pip install git+https://github.com/wairas/happy-tools.git","title":"Installation"},{"location":"happy/happy_tools/#tools","text":"The following tools are available (located in ./happy/bin ): happy-hsi2csv - converts HSI images into CSV happy-hsi2rbg - generates fake RGB PNG files from HSI images happy-viewer - for viewing HSI images","title":"Tools"},{"location":"happy/sam/","text":"Facebook's Segment Anything are pretrained models that perform image segmentation on RGB images and can aid the human in the annotation process. Prerequisites # Linux # docker redis-server ( sudo apt install redis-server ) Windows # WSL2 using Ubuntu 20.04 or 22.04 docker ( instructions ) redis-server ( sudo apt install redis-server ) Directories # sam | +-- cache # cache directory for Pytorch-related files | +-- models # for storing the You can create the structure using the following command: mkdir -p sam/cache \\ mkdir -p sam/models Pretrained models # Pretrained models can be downloaded from here , with the medium-sized vit_l being the recommended one (requires <6GB GPU RAM). vit_l is used in the commands below. From within the sam/models directory, run the following command: wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_l_0b3195.pth Scripts (WSL2 without Docker Desktop UI) # Create a bash script happy_sam_start.sh in /usr/local/bin with the following content: #!/bin/bash redis-server & dockerd & seq 10 | xargs -I{} sh -c \"echo waiting...; sleep 1;\" Make the script executable with sudo chmod a+x happy_sam_start.sh Create a bash script happy_sam_stop.sh in /usr/local/bin with the following content: #!/bin/bash killall redis-server killall dockerd Make the script executable with sudo chmod a+x happy_sam_stop.sh Launching services # Docker and Redis (WSL2 without Docker Desktop UI) # sudo /usr/local/bin/happy_sam_start.sh Wait till the Waiting... output stops, which waits for about 10 seconds after the Docker daemon starts in the background. SAM # In a terminal, run the following command from within the sam directory to launch the SAM model (which communicates via the sam_in and sam_out Redis channels): docker run --pull always --rm \\ -u $(id -u):$(id -g) -e USER=$USER \\ -v `pwd`/cache:/.cache -v `pwd`:/workspace \\ --gpus=all --net=host \\ -t waikatodatamining/pytorch-sam:2023-04-16_cuda11.6 \\ sam_predict_redis \\ --redis_in sam_in \\ --redis_out sam_out \\ --model /workspace/models/sam_vit_l_0b3195.pth \\ --model_type vit_l \\ --verbose Stopping services # SAM # Find the process ID (PID) of the Python process for SAM and use kill -9 PID : ids=`ps a | grep [s]am_predict_redis | sed s/\"^[ ]*\"//g | cut -f1 -d\" \"`; for id in $ids; do kill -9 $id; done; Docker and Redis (WSL2 without Docker Desktop UI) # sudo /usr/local/bin/happy_sam_stop.sh NB: This will also stop any running SAM process.","title":"SAM"},{"location":"happy/sam/#prerequisites","text":"","title":"Prerequisites"},{"location":"happy/sam/#linux","text":"docker redis-server ( sudo apt install redis-server )","title":"Linux"},{"location":"happy/sam/#windows","text":"WSL2 using Ubuntu 20.04 or 22.04 docker ( instructions ) redis-server ( sudo apt install redis-server )","title":"Windows"},{"location":"happy/sam/#directories","text":"sam | +-- cache # cache directory for Pytorch-related files | +-- models # for storing the You can create the structure using the following command: mkdir -p sam/cache \\ mkdir -p sam/models","title":"Directories"},{"location":"happy/sam/#pretrained-models","text":"Pretrained models can be downloaded from here , with the medium-sized vit_l being the recommended one (requires <6GB GPU RAM). vit_l is used in the commands below. From within the sam/models directory, run the following command: wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_l_0b3195.pth","title":"Pretrained models"},{"location":"happy/sam/#scripts-wsl2-without-docker-desktop-ui","text":"Create a bash script happy_sam_start.sh in /usr/local/bin with the following content: #!/bin/bash redis-server & dockerd & seq 10 | xargs -I{} sh -c \"echo waiting...; sleep 1;\" Make the script executable with sudo chmod a+x happy_sam_start.sh Create a bash script happy_sam_stop.sh in /usr/local/bin with the following content: #!/bin/bash killall redis-server killall dockerd Make the script executable with sudo chmod a+x happy_sam_stop.sh","title":"Scripts (WSL2 without Docker Desktop UI)"},{"location":"happy/sam/#launching-services","text":"","title":"Launching services"},{"location":"happy/sam/#docker-and-redis-wsl2-without-docker-desktop-ui","text":"sudo /usr/local/bin/happy_sam_start.sh Wait till the Waiting... output stops, which waits for about 10 seconds after the Docker daemon starts in the background.","title":"Docker and Redis (WSL2 without Docker Desktop UI)"},{"location":"happy/sam/#sam","text":"In a terminal, run the following command from within the sam directory to launch the SAM model (which communicates via the sam_in and sam_out Redis channels): docker run --pull always --rm \\ -u $(id -u):$(id -g) -e USER=$USER \\ -v `pwd`/cache:/.cache -v `pwd`:/workspace \\ --gpus=all --net=host \\ -t waikatodatamining/pytorch-sam:2023-04-16_cuda11.6 \\ sam_predict_redis \\ --redis_in sam_in \\ --redis_out sam_out \\ --model /workspace/models/sam_vit_l_0b3195.pth \\ --model_type vit_l \\ --verbose","title":"SAM"},{"location":"happy/sam/#stopping-services","text":"","title":"Stopping services"},{"location":"happy/sam/#sam_1","text":"Find the process ID (PID) of the Python process for SAM and use kill -9 PID : ids=`ps a | grep [s]am_predict_redis | sed s/\"^[ ]*\"//g | cut -f1 -d\" \"`; for id in $ids; do kill -9 $id; done;","title":"SAM"},{"location":"happy/sam/#docker-and-redis-wsl2-without-docker-desktop-ui_1","text":"sudo /usr/local/bin/happy_sam_stop.sh NB: This will also stop any running SAM process.","title":"Docker and Redis (WSL2 without Docker Desktop UI)"}]}